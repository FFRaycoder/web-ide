{"version":3,"sources":["vs/code/browser/workbench/fake","vs/code/browser/workbench/file:/home/runner/work/BuildGithub1s/BuildGithub1s/github1s/lib/vscode/src/vs/github1s/notification.ts","vs/code/browser/workbench/file:/home/runner/work/BuildGithub1s/BuildGithub1s/github1s/lib/vscode/src/vs/github1s/util.ts","vs/code/browser/workbench/file:/home/runner/work/BuildGithub1s/BuildGithub1s/github1s/lib/vscode/src/vs/code/browser/workbench/workbench.ts"],"names":["__m","__M","deps","result","i","len","length","define","notificationHtml","title","content","link","window","location","pathname","match","getGitpodRepoUrl","map","notification","exports","renderNotification","localStorage","getItem","notificationElement","document","createElement","classList","add","innerHTML","body","appendChild","querySelector","onclick","checked","setItem","removeChild","getBrowserUrl","href","replaceBrowserUrl","url","history","replaceState","getGitHub1sCustomCommands","id","handler","util_1","doCreateUri","path","queryValues","query","undefined","index","forEach","value","key","prefix","encodeURIComponent","uri_1","URI","parse","with","LocalStorageCredentialsProvider","[object Object]","authSessionInfo","authSessionElement","getElementById","authSessionElementAttribute","getAttribute","JSON","error","this","setPassword","product_1","default","urlProtocol","stringify","authService","providerId","scopes","accessToken","credentials","_credentials","serializedCredentials","CREDENTIALS_OPENED_KEY","Array","isArray","service","account","doGetPassword","credential","password","doDeletePassword","push","save","logout","console","log","found","filter","Map","set","String","request_1","request","toString","cancellation_1","CancellationToken","None","PollingURLCallbackProvider","lifecycle_1","Disposable","_onCallback","_register","event_1","Emitter","onCallback","event","options","requestId","uuid_1","generateUuid","QUERY_KEYS","REQUEST_ID","scheme","authority","fragment","SCHEME","AUTHORITY","PATH","QUERY","FRAGMENT","periodicFetchCallback","Date","now","startTime","buffer_1","streamToBuffer","stream","byteLength","fire","revive","FETCH_TIMEOUT","setTimeout","FETCH_INTERVAL","WorkspaceProvider","workspace","payload","reuse","isSame","targetHref","createTargetUrl","browser_1","isStandalone","open","windows_1","isFolderToOpen","origin","QUERY_PARAM_FOLDER","folderUri","isWorkspaceToOpen","QUERY_PARAM_WORKSPACE","workspaceUri","QUERY_PARAM_EMPTY_WINDOW","QUERY_PARAM_PAYLOAD","workspaceA","workspaceB","resources_1","isEqual","network_1","Schemas","vscodeRemote","WindowIndicator","onDidChange","Event","repositoryOwner","repositoryName","uri","split","Boolean","label","nls_1","localize","tooltip","configElement","configElementAttribute","Error","config","staticExtensions","extension","extensionLocation","foundWorkspace","Object","create","logLevel","URL","searchParams","workspaceProvider","repoOwner","repoName","homeIndicator","icon","windowIndicator","hasRemote","settingsSyncOptions","enabled","enablementHandler","enablement","queryString","workbench_web_api_1","assign","commands","log_1","parseLogLevel","productQualityChangeHandler","quality","urlCallbackProvider","credentialsProvider","notification_1","call"],"mappings":";;;CAAA,WACA,IAAAA,EAAA,CAAA,UAAA,UAAA,kCAAA,2BAAA,mBAAA,6CAAA,sCAAA,iCAAA,qBAAA,uBAAA,sBAAA,8BAAA,wBAAA,2BAAA,wCAAA,qCAAA,2BAAA,0BAAA,6CAAA,yBAAA,qCAAA,8BACAC,EAAA,SAAAC,GAEA,IADA,IAAAC,EAAA,GACAC,EAAA,EAAAC,EAAAH,EAAAI,OAAAF,EAAAC,EAAAD,IACAD,EAAAC,GAAAJ,EAAAE,EAAAE,IAEA,OAAAD,GAPAI,OAAAP,EAAA,GAAAC,EAAA,CAAA,IAAA,oICOA,MAiBMO,EAAmB,GAXH,CAAC,CACtBC,MAAO;AACPC,QACC,kFACDC,KAAM,uCACJ,CACFF,MAAO,sCARiB,KAAMG,OAAOC,SAASC,SAASC,MAAM,qBAAuB,wCAAwCH,OAAOC,SAASC,SAASC,MAAM,qBAAsB,KAAO,GAQ3IC,sIAC7CN,QACA;GAIcO,IAAIC,GAAgB,gFAEEA,EAAaT,kEAE5CS,EAAaR,oBACbQ,EAAaP,KAAO,sCAAsCO,EAAaP,qCAAuC,8PAavGQ,EAAAC,mBAAqB,KAEjC,IACER,OAAOS,cArCyB,aAsCjCT,OAAOS,aAAaC,QAxCW,yBA2C/B,OAGD,MAAMC,EAAsCC,SAASC,cAAc,OACnEF,EAAoBG,UAAUC,IAAI,yBAClCJ,EAAoBK,UAAYpB,EAChCgB,SAASK,KAAKC,YAAYP,GAGzBA,EAAoBQ,cAAc,gCAC/BC,QAAU,OAEZT,EAAoBQ,cAAc,qCAC/BE,SAEHrB,OAAOS,aAAaa,QA1DU,wBAEE,YA6DjCV,SAASK,KAAKM,YAAYZ;yGCjEfJ,EAAAiB,cAAgB,IACrBxB,OAAOC,SAASwB,KAGXlB,EAAAmB,kBAAqBC,IAC7B3B,OAAO4B,QAAQC,cAClB7B,OAAO4B,QAAQC,aAAa,KAAM,GAAIF,yLC2BxC,MAAMG,EAGA,IAAM,CACX,CAAEC,GAAI,kCAAmCC,QAASC,EAAAT,eAClD,CAAEO,GAAI,sCAAuCC,QAASC,EAAAP,oBAGvD,SAASQ,EAAYC,EAAcC,GAClC,IAAIC,OAA4BC,EAEhC,GAAIF,EAAa,CAChB,IAAIG,EAAQ,EACZH,EAAYI,QAAQ,CAACC,EAAOC,KACtBL,IACJA,EAAQ,IAGT,MAAMM,EAAqB,GAAZJ,IAAgB,GAAK,IACpCF,GAAS,GAAGM,IAASD,KAAOE,mBAAmBH,OAIjD,OAAOI,EAAAC,IAAIC,MAAM/C,OAAOC,SAASwB,MAAMuB,KAAK,CAAEb,KAAAA,EAAME,MAAAA,IASrD,MAAMY,EAKLC,cACC,IAAIC,EASJ,MAAMC,EAAqBxC,SAASyC,eACnC,iCAEKC,EAA8BF,EACjCA,EAAmBG,aAAa,sBAChCjB,EACH,GAAIgB,EACH,IACCH,EAAkBK,KAAKT,MAAMO,GAC5B,MAAOG,IAKNN,IAEHO,KAAKC,YACJ,GAAGC,EAAAC,QAAQC,oBACX,UACAN,KAAKO,UAAUZ;AAIhBO,KAAKM,YAAc,GAAGJ,EAAAC,QAAQC,eAAeX,EAAgBc,mBAC7DP,KAAKC,YACJD,KAAKM,YACL,UACAR,KAAKO,UACJZ,EAAgBe,OAAO7D,IAAK6D,IAAW,CACtCnC,GAAIoB,EAAiBpB,GACrBmC,OAAAA,EACAC,YAAahB,EAAiBgB,kBAQnCC,kBACC,IAAKV,KAAKW,aAAc,CACvB,IACC,MAAMC,EAAwBtE,OAAOS,aAAaC,QACjDuC,EAAgCsB,wBAE7BD,IACHZ,KAAKW,aAAeb,KAAKT,MAAMuB,IAE/B,MAAOb,IAIJe,MAAMC,QAAQf,KAAKW,gBACvBX,KAAKW,aAAe,IAItB,OAAOX,KAAKW,aAGLnB,OACPlD,OAAOS,aAAaa,QACnB2B,EAAgCsB,uBAChCf,KAAKO,UAAUL,KAAKU,cAItBlB,kBAAkBwB,EAAiBC,GAClC,OAAOjB,KAAKkB,cAAcF,EAASC,GAG5BzB,oBACPwB,EACAC,GAEA,IAAK,MAAME,KAAcnB,KAAKU,YAC7B,GAAIS,EAAWH,UAAYA,IACH,iBAAZC,GAAwBA,IAAYE,EAAWF,SACzD,OAAOE,EAAWC,SAKrB,OAAO,KAGR5B,kBACCwB,EACAC,EACAG,GAEApB,KAAKqB,iBAAiBL,EAASC,GAE/BjB,KAAKU,YAAYY,KAAK,CAAEN,QAAAA,EAASC,QAAAA,EAASG,SAAAA,IAE1CpB,KAAKuB,OAEL,IACC,GAAIH,GAAYJ,IAAYhB,KAAKM,YAAa,CAC7C,MAAMvB,EAAQe,KAAKT,MAAM+B,GACrBN,MAAMC,QAAQhC,IAA2B,IAAjBA,EAAM/C,cAC3BgE,KAAKwB,OAAOR,IAGnB,MAAOjB,GACR0B,QAAQC,IAAI3B,IAIdP,qBAAqBwB,EAAiBC;AACrC,MAAMpF,QAAemE,KAAKqB,iBAAiBL,EAASC,GAEpD,GAAIpF,GAAUmF,IAAYhB,KAAKM,YAC9B,UACON,KAAKwB,OAAOR,GACjB,MAAOjB,GACR0B,QAAQC,IAAI3B,GAId,OAAOlE,EAGA2D,uBACPwB,EACAC,GAEA,IAAIU,GAAQ,EAgBZ,OAdA3B,KAAKW,aAAeX,KAAKU,YAAYkB,OAAQT,GACxCA,EAAWH,UAAYA,GAAWG,EAAWF,UAAYA,IAC5DU,GAAQ,GAED,IAMLA,GACH3B,KAAKuB,OAGCI,EAGRnC,mBAAmBwB,GAClB,OAAOhB,KAAKkB,cAAcF,GAG3BxB,sBACCwB,GAEA,OAAOhB,KAAKU,YACVkB,OAAQT,GAAeA,EAAWH,UAAYA,GAC9CrE,IAAI,EAAGsE,QAAAA,EAASG,SAAAA,MAAe,CAAGH,QAAAA,EAASG,SAAAA,KAGtC5B,aAAawB,GACpB,MAAMtC,EAAmC,IAAImD,IAC7CnD,EAAYoD,IAAI,SAAUC,QAAO,IACjCrD,EAAYoD,IAAI,UAAWd,SAErBgB,EAAAC,QACL,CACChE,IAAKO,EAAY,eAAgBE,GAAawD,UAAS,IAExDC,EAAAC,kBAAkBC,OArLJ9C,EAAAsB,uBAAyB,uBA0L1C,MAAMyB,UACGC,EAAAC,WADThD,kCAekBQ,KAAAyC,YAAczC,KAAK0C,UAAU,IAAIC,EAAAC,SACzC5C,KAAA6C,WAAa7C,KAAKyC,YAAYK,MAEvCtD,OAAOuD,GACN,MAAMrE,EAAmC,IAAImD,IAEvCmB,EAAYC,EAAAC,eAClBxE,EAAYoD,IACXQ,EAA2Ba,WAAWC,WACtCJ,GAGD,MAAMK,OAAEA,EAAMC,UAAEA,EAAS7E,KAAEA,EAAIE,MAAEA,EAAK4E,SAAEA,GAAaR,GAElD,CACAM,YAAQzE,EACR0E,eAAW1E,EACXH,UAAMG,EACND,WAAOC,EACP2E,cAAU3E;CA6Bb,OA1BIyE,GACH3E,EAAYoD,IAAIQ,EAA2Ba,WAAWK,OAAQH,GAG3DC,GACH5E,EAAYoD,IACXQ,EAA2Ba,WAAWM,UACtCH,GAIE7E,GACHC,EAAYoD,IAAIQ,EAA2Ba,WAAWO,KAAMjF,GAGzDE,GACHD,EAAYoD,IAAIQ,EAA2Ba,WAAWQ,MAAOhF,GAG1D4E,GACH7E,EAAYoD,IAAIQ,EAA2Ba,WAAWS,SAAUL,GAIjEvD,KAAK6D,sBAAsBb,EAAWc,KAAKC,OAEpCvF,EAAY,YAAaE,GAGzBc,4BACPwD,EACAgB,GAGA,MAAMtF,EAAmC,IAAImD,IAC7CnD,EAAYoD,IACXQ,EAA2Ba,WAAWC,WACtCJ,GAGD,MAAMnH,QAAemG,EAAAC,QACpB,CACChE,IAAKO,EAAY,kBAAmBE,GAAawD,UAAS,IAE3DC,EAAAC,kBAAkBC,MAIbjG,QAAgB6H,EAAAC,eAAerI,EAAOsI,QAC5C,GAAI/H,EAAQgI,WAAa,EACxB,IACCpE,KAAKyC,YAAY4B,KAAKlF,EAAAC,IAAIkF,OAAOxE,KAAKT,MAAMjD,EAAQ8F,cACnD,MAAOnC,GACR0B,QAAQ1B,MAAMA,QAOZ+D,KAAKC,MAAQC,EAAY1B,EAA2BiC,eACvDC,WACC,IAAMxE,KAAK6D,sBAAsBb,EAAWgB,GAC5C1B,EAA2BmC,iBAjGdnC,EAAAmC,eAAiB,IACjBnC,EAAAiC,cAAgB,IAEhBjC,EAAAa,WAAa,CAC5BC,WAAY,mBACZI,OAAQ,gBACRC,UAAW,mBACXC,KAAM,cACNC,MAAO,eACPC,SAAU,mBA8FZ,MAAMc,EAOLlF,YACiBmF,EACAC,GADA5E,KAAA2E,UAAAA,EACA3E,KAAA4E,QAAAA,EAGjBpF,WACCmF,EACA5B,GAEA,IACCA,MAAAA,OAAO,EAAPA,EAAS8B,SACR9B,EAAQ6B,SACT5E,KAAK8E,OAAO9E,KAAK2E,UAAWA,GAE5B;CAGD,MAAMI,EAAa/E,KAAKgF,gBAAgBL,EAAW5B,GAC/CgC,KACChC,MAAAA,OAAO,EAAPA,EAAS8B,OACZvI,OAAOC,SAASwB,KAAOgH,EAEnBE,EAAAC,aACH5I,OAAO6I,KAAKJ,EAAY,SAAU,cAElCzI,OAAO6I,KAAKJ,IAMRvF,gBACPmF,EACA5B,GAGA,IAAIgC,OAAiCnG,EA0BrC,OAzBK+F,EAKIS,EAAAC,eAAeV,GACvBI,EAAa,GAAG7H,SAASX,SAAS+I,SAASpI,SAASX,SAASC,YAC5DkI,EAAkBa,sBACfrG,mBAAmByF,EAAUa,UAAUtD,cAInCkD,EAAAK,kBAAkBd,KAC1BI,EAAa,GAAG7H,SAASX,SAAS+I,SAASpI,SAASX,SAASC,YAC5DkI,EAAkBgB,yBACfxG,mBAAmByF,EAAUgB,aAAazD,eAd9C6C,EAAa,GAAG7H,SAASX,SAAS+I,SAASpI,SAASX,SAASC,YAAYkI,EAAkBkB,iCAkBxF7C,MAAAA,OAAO,EAAPA,EAAS6B,WACZG,GAAc,IACbL,EAAkBmB,uBACf3G,mBAAmBY,KAAKO,UAAU0C,EAAQ6B,aAGxCG,EAGAvF,OAAOsG,EAAwBC,GACtC,OAAKD,GAAeC,EAIhBX,EAAAC,eAAeS,IAAeV,EAAAC,eAAeU,GACzCC,EAAAC,QAAQH,EAAWN,UAAWO,EAAWP,cAG7CJ,EAAAK,kBAAkBK,KAAeV,EAAAK,kBAAkBM,KAC/CC,EAAAC,QAAQH,EAAWH,aAAcI,EAAWJ,cAR5CG,IAAeC,EAcxBvG,YACC,GAAIQ,KAAK2E,UAAW;AACnB,GAAIS,EAAAC,eAAerF,KAAK2E,WACvB,OAAO3E,KAAK2E,UAAUa,UAAUnC,SAAW6C,EAAAC,QAAQC,aAGpD,GAAIhB,EAAAK,kBAAkBzF,KAAK2E,WAC1B,OAAO3E,KAAK2E,UAAUgB,aAAatC,SAAW6C,EAAAC,QAAQC,aAIxD,OAAO,GAlGD1B,EAAAkB,yBAA2B,KAC3BlB,EAAAa,mBAAqB,SACrBb,EAAAgB,sBAAwB,YAExBhB,EAAAmB,oBAAsB,UAkG9B,MAAMQ,EAOL7G,YAAYmF,GANH3E,KAAAsG,YAAc3D,EAAA4D,MAAMlE,KAO5B,IAAImE,OAAsC5H,EACtC6H,OAAqC7H,EAEzC,GAAI+F,EAAW,CACd,IAAI+B,OAAuB9H,EACvBwG,EAAAC,eAAeV,GAClB+B,EAAM/B,EAAUa,UACNJ,EAAAK,kBAAkBd,KAC5B+B,EAAM/B,EAAUgB,cAGG,cAAhBe,MAAAA,OAAG,EAAHA,EAAKrD,WACPmD,EAAkB,UAAWC,EAAiB,YAActH,EAAAC,IAAIC,MAChEd,EAAAT,iBAECW,KAAKkI,MAAM,KACX/E,OAAOgF,UAKPH,GAAkBD,GACrBxG,KAAK6G,MAAQC,EAAAC,SACZ,EACA,KACAP,EACAC,GAEDzG,KAAKgH,QAAUF,EAAAC,SACd,EACA,KACAP,EACAC,KAMDzG,KAAK6G,MAAQC,EAAAC,SAAS,EAAmB,MACzC/G,KAAKgH,QAAUF,EAAAC,SAAS,EAAqB,SAKhD,WAEC,MAAME,EAAgB/J,SAASyC,eAC9B,sCAEKuH,EAAyBD,EAC5BA,EAAcpH,aAAa,sBAC3BjB,EACH,IAAKqI,IAAkBC,EACtB,MAAM,IAAIC,MAAM,qCAGjB,MAAMC,EAGFtH,KAAKT,MAAM6H;CAGXpG,MAAMC,QAAQqG,EAAOC,mBACxBD,EAAOC,iBAAiBvI,QAASwI,IAChCA,EAAUC,kBAAoBpI,EAAAC,IAAIkF,OAAOgD,EAAUC,qBAKrD,IACI5C,EADA6C,GAAiB,EAEjB5C,EAAU6C,OAAOC,OAAO,MACxBC,OAA+B/I,EAErB,IAAIgJ,IAAI1K,SAASX,SAASwB,MAAM8J,aACxC/I,QAAQ,CAACC,EAAOC,KACrB,OAAQA,GAEP,KAAK0F,EAAkBa,mBACtBZ,EAAY,CAAEa,UAAWrG,EAAAC,IAAIC,MAAMN,IACnCyI,GAAiB,EACjB,MAGD,KAAK9C,EAAkBgB,sBACtBf,EAAY,CAAEgB,aAAcxG,EAAAC,IAAIC,MAAMN,IACtCyI,GAAiB,EACjB,MAGD,KAAK9C,EAAkBkB,yBACtBjB,OAAY/F,EACZ4I,GAAiB,EACjB,MAGD,KAAK9C,EAAkBmB,oBACtB,IACCjB,EAAU9E,KAAKT,MAAMN,GACpB,MAAOgB,GACR0B,QAAQ1B,MAAMA,GAEf,MAGD,IAAK,WACJ4H,EAAW5I,KAMTyI,IAEH7C,EADGyC,EAAO5B,UACE,CAAEA,UAAWrG,EAAAC,IAAIkF,OAAO8C,EAAO5B,YACjC4B,EAAOzB,aACL,CAAEA,aAAcxG,EAAAC,IAAIkF,OAAO8C,EAAOzB,oBAElC/G,GAKd,MAAMkJ,EAAoB,IAAIpD,EAAkBC,EAAWC,IAGpDmD,EAAY,UAAWC,EAAW,aACxC7I,EAAAC,IAAIC,MAAM/C,OAAOC,SAASwB,MAAMU,MAAQ,IAEvCkI,MAAM,KACN/E,OAAOgF,SACHqB,EAAgC,CACrClK,KAAM,sBAAsBgK,KAAaC,IACzCE,KAAM,SACN/L,MAAO2K,EAAAC,SAAS,EAAQ,OAIzB,IAAIoB,OAA+CvJ,EAC9CkJ,EAAkBM,cACtBD,EAAkB,IAAI9B,EAAgB1B,IAIvC,MAiBM0D,EAESjB,EAAOiB,oBACnB,CACAC,QAASlB,EAAOiB,oBAAoBC,QACpCC,kBAAoBC,IACnB,IAAIC,EAAc,gBAAgBD,EAAa,OAAS;CAG1C,IAAIZ,IAAI1K,SAASX,SAASwB,MAAM8J,aACxC/I,QAAQ,CAACC,EAAOC,KACT,iBAARA,IACHyJ,GAAe,IAAIzJ,KAAOD,OAI5BzC,OAAOC,SAASwB,KAAO,GAAGzB,OAAOC,SAAS+I,UAAUmD,WAGrD7J,EAGH8J,EAAAhB,OAAOxK,SAASK,KAAIkK,OAAAkB,OAAAlB,OAAAkB,OAAA,GAChBvB,GAAM,CACTwB,SAAUxK,IACVuJ,SAAUA,EAAWkB,EAAAC,cAAcnB,QAAY/I,EAC/CyJ,oBAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAY,4BA7CAC,IAEA,IAAIP,EAAc,WAAWO,IAGf,IAAIpB,IAAI1K,SAASX,SAASwB,MAAM8J,aACxC/I,QAAQ,CAACC,EAAOC,KACT,YAARA,IACHyJ,GAAe,IAAIzJ,KAAOD,OAI5BzC,OAAOC,SAASwB,KAAO,GAAGzB,OAAOC,SAAS+I,UAAUmD,KAkCpDX,kBAAAA,EACAmB,oBAAqB,IAAI3G,EACzB4G,oBAAqB,IAAI3J,KAG1BiF,WAAW,IAAM2E,EAAArM,qBAAsB,KAxJxC,QHtgBAsM,KAAApJ","file":"workbench.js","sourcesContent":["}).call(this);","/**\n * @file github1s notification\n * @author netcon\n */\n\nimport 'vs/css!./notification';\n\nconst NOTIFICATION_STORAGE_KEY = 'GITHUB1S_NOTIFICATION';\n// Change this if a new notification should be shown\nconst NOTIFICATION_STORAGE_VALUE = '20210212';\n\nconst getGitpodRepoUrl = () => window.location.pathname.match(/^\\/[^\\/]+\\/[^\\/]+/) ? `https://gitpod.io/#https://github.com${window.location.pathname.match(/^\\/[^\\/]+\\/[^\\/]+/)![0]}` : '';\n\nconst notifications = [{\n\ttitle: 'ATTENTION: This page is NOT officially provided by GitHub.',\n\tcontent:\n\t\t'GitHub1s is an open source project, which is not officially provided by GitHub.',\n\tlink: 'https://github.com/conwnet/github1s',\n}, {\n\ttitle: `<a class=\"notification-link\" href=\"${getGitpodRepoUrl()}\" alt=\"Gitpod ready-to-code\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\"></a>`,\n\tcontent:\n\t'Click the button above to develop your project in the cloud.',\n}];\n\nconst notificationHtml = `${\n\tnotifications.map(notification => (`\n\t\t<div class=\"notification-main\">\n\t\t\t<div class=\"notification-title\">${notification.title}</div>\n\t\t\t<div class=\"notification-content\">\n\t\t\t\t${notification.content}\n\t\t\t\t${notification.link ? `<a class=\"notification-link\" href=\"${notification.link}\" target=\"_blank\">See more</a>` : ''}\n\t\t\t</div>\n\t\t</div>`\n\t))\n}\n<div class=\"notification-footer\">\n\t<button class=\"notification-confirm-button\">OK</button>\n\t<div class=\"notification-show-me-again\">\n\t\t<input type=\"checkbox\" checked>Don't show me again</div>\n\t</div>\n</div>\n`;\n\nexport const renderNotification = () => {\n\t// If user has confirmed the notification and checked `don't show me again`, ignore it\n\tif (\n\t\t!window.localStorage ||\n\t\twindow.localStorage.getItem(NOTIFICATION_STORAGE_KEY) ===\n\t\t\tNOTIFICATION_STORAGE_VALUE\n\t) {\n\t\treturn;\n\t}\n\n\tconst notificationElement = <HTMLDivElement>document.createElement('div');\n\tnotificationElement.classList.add('github1s-notification');\n\tnotificationElement.innerHTML = notificationHtml;\n\tdocument.body.appendChild(notificationElement);\n\n\t(<HTMLButtonElement>(\n\t\tnotificationElement.querySelector('.notification-confirm-button')\n\t))!.onclick = () => {\n\t\tconst notShowMeAgain = !!(<HTMLInputElement>(\n\t\t\tnotificationElement.querySelector('.notification-show-me-again input')\n\t\t))!.checked;\n\t\tif (notShowMeAgain) {\n\t\t\twindow.localStorage.setItem(\n\t\t\t\tNOTIFICATION_STORAGE_KEY,\n\t\t\t\tNOTIFICATION_STORAGE_VALUE\n\t\t\t);\n\t\t}\n\t\tdocument.body.removeChild(notificationElement);\n\t};\n};\n","/**\n * @file github1s common utils\n * @autor netcon\n */\n\nexport const getBrowserUrl = (): string => {\n\treturn window.location.href;\n};\n\nexport const replaceBrowserUrl = (url: string) => {\n\tif (window.history.replaceState) {\n\t\twindow.history.replaceState(null, '', url);\n\t}\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tIWorkbenchConstructionOptions,\n\tcreate,\n\tICredentialsProvider,\n\tIURLCallbackProvider,\n\tIWorkspaceProvider,\n\tIWorkspace,\n\tIWindowIndicator,\n\tIHomeIndicator,\n\tIProductQualityChangeHandler,\n\tISettingsSyncOptions,\n} from 'vs/workbench/workbench.web.api';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { streamToBuffer } from 'vs/base/common/buffer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { request } from 'vs/base/parts/request/browser/request';\nimport {\n\tisFolderToOpen,\n\tisWorkspaceToOpen,\n} from 'vs/platform/windows/common/windows';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isStandalone } from 'vs/base/browser/browser';\nimport { localize } from 'vs/nls';\nimport { Schemas } from 'vs/base/common/network';\nimport product from 'vs/platform/product/common/product';\nimport { parseLogLevel } from 'vs/platform/log/common/log';\nimport { getBrowserUrl, replaceBrowserUrl } from 'vs/github1s/util';\nimport { renderNotification } from 'vs/github1s/notification';\n\n// custom vs code commands defined by github1s\nconst getGitHub1sCustomCommands: () => {\n\tid: string;\n\thandler: (...args: any[]) => unknown;\n}[] = () => [\n\t{ id: 'github1s.vscode.get-browser-url', handler: getBrowserUrl },\n\t{ id: 'github1s.vscode.replace-browser-url', handler: replaceBrowserUrl },\n];\n\nfunction doCreateUri(path: string, queryValues: Map<string, string>): URI {\n\tlet query: string | undefined = undefined;\n\n\tif (queryValues) {\n\t\tlet index = 0;\n\t\tqueryValues.forEach((value, key) => {\n\t\t\tif (!query) {\n\t\t\t\tquery = '';\n\t\t\t}\n\n\t\t\tconst prefix = index++ === 0 ? '' : '&';\n\t\t\tquery += `${prefix}${key}=${encodeURIComponent(value)}`;\n\t\t});\n\t}\n\n\treturn URI.parse(window.location.href).with({ path, query });\n}\n\ninterface ICredential {\n\tservice: string;\n\taccount: string;\n\tpassword: string;\n}\n\nclass LocalStorageCredentialsProvider implements ICredentialsProvider {\n\tstatic readonly CREDENTIALS_OPENED_KEY = 'credentials.provider';\n\n\tprivate readonly authService: string | undefined;\n\n\tconstructor() {\n\t\tlet authSessionInfo:\n\t\t\t| {\n\t\t\t\t\treadonly id: string;\n\t\t\t\t\treadonly accessToken: string;\n\t\t\t\t\treadonly providerId: string;\n\t\t\t\t\treadonly canSignOut?: boolean;\n\t\t\t\t\treadonly scopes: string[][];\n\t\t\t  }\n\t\t\t| undefined;\n\t\tconst authSessionElement = document.getElementById(\n\t\t\t'vscode-workbench-auth-session'\n\t\t);\n\t\tconst authSessionElementAttribute = authSessionElement\n\t\t\t? authSessionElement.getAttribute('data-settings')\n\t\t\t: undefined;\n\t\tif (authSessionElementAttribute) {\n\t\t\ttry {\n\t\t\t\tauthSessionInfo = JSON.parse(authSessionElementAttribute);\n\t\t\t} catch (error) {\n\t\t\t\t/* Invalid session is passed. Ignore. */\n\t\t\t}\n\t\t}\n\n\t\tif (authSessionInfo) {\n\t\t\t// Settings Sync Entry\n\t\t\tthis.setPassword(\n\t\t\t\t`${product.urlProtocol}.login`,\n\t\t\t\t'account',\n\t\t\t\tJSON.stringify(authSessionInfo)\n\t\t\t);\n\n\t\t\t// Auth extension Entry\n\t\t\tthis.authService = `${product.urlProtocol}-${authSessionInfo.providerId}.login`;\n\t\t\tthis.setPassword(\n\t\t\t\tthis.authService,\n\t\t\t\t'account',\n\t\t\t\tJSON.stringify(\n\t\t\t\t\tauthSessionInfo.scopes.map((scopes) => ({\n\t\t\t\t\t\tid: authSessionInfo!.id,\n\t\t\t\t\t\tscopes,\n\t\t\t\t\t\taccessToken: authSessionInfo!.accessToken,\n\t\t\t\t\t}))\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _credentials: ICredential[] | undefined;\n\tprivate get credentials(): ICredential[] {\n\t\tif (!this._credentials) {\n\t\t\ttry {\n\t\t\t\tconst serializedCredentials = window.localStorage.getItem(\n\t\t\t\t\tLocalStorageCredentialsProvider.CREDENTIALS_OPENED_KEY\n\t\t\t\t);\n\t\t\t\tif (serializedCredentials) {\n\t\t\t\t\tthis._credentials = JSON.parse(serializedCredentials);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\t\tif (!Array.isArray(this._credentials)) {\n\t\t\t\tthis._credentials = [];\n\t\t\t}\n\t\t}\n\n\t\treturn this._credentials;\n\t}\n\n\tprivate save(): void {\n\t\twindow.localStorage.setItem(\n\t\t\tLocalStorageCredentialsProvider.CREDENTIALS_OPENED_KEY,\n\t\t\tJSON.stringify(this.credentials)\n\t\t);\n\t}\n\n\tasync getPassword(service: string, account: string): Promise<string | null> {\n\t\treturn this.doGetPassword(service, account);\n\t}\n\n\tprivate async doGetPassword(\n\t\tservice: string,\n\t\taccount?: string\n\t): Promise<string | null> {\n\t\tfor (const credential of this.credentials) {\n\t\t\tif (credential.service === service) {\n\t\t\t\tif (typeof account !== 'string' || account === credential.account) {\n\t\t\t\t\treturn credential.password;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tasync setPassword(\n\t\tservice: string,\n\t\taccount: string,\n\t\tpassword: string\n\t): Promise<void> {\n\t\tthis.doDeletePassword(service, account);\n\n\t\tthis.credentials.push({ service, account, password });\n\n\t\tthis.save();\n\n\t\ttry {\n\t\t\tif (password && service === this.authService) {\n\t\t\t\tconst value = JSON.parse(password);\n\t\t\t\tif (Array.isArray(value) && value.length === 0) {\n\t\t\t\t\tawait this.logout(service);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tasync deletePassword(service: string, account: string): Promise<boolean> {\n\t\tconst result = await this.doDeletePassword(service, account);\n\n\t\tif (result && service === this.authService) {\n\t\t\ttry {\n\t\t\t\tawait this.logout(service);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async doDeletePassword(\n\t\tservice: string,\n\t\taccount: string\n\t): Promise<boolean> {\n\t\tlet found = false;\n\n\t\tthis._credentials = this.credentials.filter((credential) => {\n\t\t\tif (credential.service === service && credential.account === account) {\n\t\t\t\tfound = true;\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tif (found) {\n\t\t\tthis.save();\n\t\t}\n\n\t\treturn found;\n\t}\n\n\tasync findPassword(service: string): Promise<string | null> {\n\t\treturn this.doGetPassword(service);\n\t}\n\n\tasync findCredentials(\n\t\tservice: string\n\t): Promise<Array<{ account: string; password: string }>> {\n\t\treturn this.credentials\n\t\t\t.filter((credential) => credential.service === service)\n\t\t\t.map(({ account, password }) => ({ account, password }));\n\t}\n\n\tprivate async logout(service: string): Promise<void> {\n\t\tconst queryValues: Map<string, string> = new Map();\n\t\tqueryValues.set('logout', String(true));\n\t\tqueryValues.set('service', service);\n\n\t\tawait request(\n\t\t\t{\n\t\t\t\turl: doCreateUri('/auth/logout', queryValues).toString(true),\n\t\t\t},\n\t\t\tCancellationToken.None\n\t\t);\n\t}\n}\n\nclass PollingURLCallbackProvider\n\textends Disposable\n\timplements IURLCallbackProvider {\n\tstatic readonly FETCH_INTERVAL = 500; // fetch every 500ms\n\tstatic readonly FETCH_TIMEOUT = 5 * 60 * 1000; // ...but stop after 5min\n\n\tstatic readonly QUERY_KEYS = {\n\t\tREQUEST_ID: 'vscode-requestId',\n\t\tSCHEME: 'vscode-scheme',\n\t\tAUTHORITY: 'vscode-authority',\n\t\tPATH: 'vscode-path',\n\t\tQUERY: 'vscode-query',\n\t\tFRAGMENT: 'vscode-fragment',\n\t};\n\n\tprivate readonly _onCallback = this._register(new Emitter<URI>());\n\treadonly onCallback = this._onCallback.event;\n\n\tcreate(options?: Partial<UriComponents>): URI {\n\t\tconst queryValues: Map<string, string> = new Map();\n\n\t\tconst requestId = generateUuid();\n\t\tqueryValues.set(\n\t\t\tPollingURLCallbackProvider.QUERY_KEYS.REQUEST_ID,\n\t\t\trequestId\n\t\t);\n\n\t\tconst { scheme, authority, path, query, fragment } = options\n\t\t\t? options\n\t\t\t: {\n\t\t\t\t\tscheme: undefined,\n\t\t\t\t\tauthority: undefined,\n\t\t\t\t\tpath: undefined,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t\tfragment: undefined,\n\t\t\t  };\n\n\t\tif (scheme) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.SCHEME, scheme);\n\t\t}\n\n\t\tif (authority) {\n\t\t\tqueryValues.set(\n\t\t\t\tPollingURLCallbackProvider.QUERY_KEYS.AUTHORITY,\n\t\t\t\tauthority\n\t\t\t);\n\t\t}\n\n\t\tif (path) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.PATH, path);\n\t\t}\n\n\t\tif (query) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.QUERY, query);\n\t\t}\n\n\t\tif (fragment) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.FRAGMENT, fragment);\n\t\t}\n\n\t\t// Start to poll on the callback being fired\n\t\tthis.periodicFetchCallback(requestId, Date.now());\n\n\t\treturn doCreateUri('/callback', queryValues);\n\t}\n\n\tprivate async periodicFetchCallback(\n\t\trequestId: string,\n\t\tstartTime: number\n\t): Promise<void> {\n\t\t// Ask server for callback results\n\t\tconst queryValues: Map<string, string> = new Map();\n\t\tqueryValues.set(\n\t\t\tPollingURLCallbackProvider.QUERY_KEYS.REQUEST_ID,\n\t\t\trequestId\n\t\t);\n\n\t\tconst result = await request(\n\t\t\t{\n\t\t\t\turl: doCreateUri('/fetch-callback', queryValues).toString(true),\n\t\t\t},\n\t\t\tCancellationToken.None\n\t\t);\n\n\t\t// Check for callback results\n\t\tconst content = await streamToBuffer(result.stream);\n\t\tif (content.byteLength > 0) {\n\t\t\ttry {\n\t\t\t\tthis._onCallback.fire(URI.revive(JSON.parse(content.toString())));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\n\t\t\treturn; // done\n\t\t}\n\n\t\t// Continue fetching unless we hit the timeout\n\t\tif (Date.now() - startTime < PollingURLCallbackProvider.FETCH_TIMEOUT) {\n\t\t\tsetTimeout(\n\t\t\t\t() => this.periodicFetchCallback(requestId, startTime),\n\t\t\t\tPollingURLCallbackProvider.FETCH_INTERVAL\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass WorkspaceProvider implements IWorkspaceProvider {\n\tstatic QUERY_PARAM_EMPTY_WINDOW = 'ew';\n\tstatic QUERY_PARAM_FOLDER = 'folder';\n\tstatic QUERY_PARAM_WORKSPACE = 'workspace';\n\n\tstatic QUERY_PARAM_PAYLOAD = 'payload';\n\n\tconstructor(\n\t\tpublic readonly workspace: IWorkspace,\n\t\tpublic readonly payload: object\n\t) {}\n\n\tasync open(\n\t\tworkspace: IWorkspace,\n\t\toptions?: { reuse?: boolean; payload?: object }\n\t): Promise<void> {\n\t\tif (\n\t\t\toptions?.reuse &&\n\t\t\t!options.payload &&\n\t\t\tthis.isSame(this.workspace, workspace)\n\t\t) {\n\t\t\treturn; // return early if workspace and environment is not changing and we are reusing window\n\t\t}\n\n\t\tconst targetHref = this.createTargetUrl(workspace, options);\n\t\tif (targetHref) {\n\t\t\tif (options?.reuse) {\n\t\t\t\twindow.location.href = targetHref;\n\t\t\t} else {\n\t\t\t\tif (isStandalone) {\n\t\t\t\t\twindow.open(targetHref, '_blank', 'toolbar=no'); // ensures to open another 'standalone' window!\n\t\t\t\t} else {\n\t\t\t\t\twindow.open(targetHref);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createTargetUrl(\n\t\tworkspace: IWorkspace,\n\t\toptions?: { reuse?: boolean; payload?: object }\n\t): string | undefined {\n\t\t// Empty\n\t\tlet targetHref: string | undefined = undefined;\n\t\tif (!workspace) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW}=true`;\n\t\t}\n\n\t\t// Folder\n\t\telse if (isFolderToOpen(workspace)) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${\n\t\t\t\tWorkspaceProvider.QUERY_PARAM_FOLDER\n\t\t\t}=${encodeURIComponent(workspace.folderUri.toString())}`;\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(workspace)) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${\n\t\t\t\tWorkspaceProvider.QUERY_PARAM_WORKSPACE\n\t\t\t}=${encodeURIComponent(workspace.workspaceUri.toString())}`;\n\t\t}\n\n\t\t// Append payload if any\n\t\tif (options?.payload) {\n\t\t\ttargetHref += `&${\n\t\t\t\tWorkspaceProvider.QUERY_PARAM_PAYLOAD\n\t\t\t}=${encodeURIComponent(JSON.stringify(options.payload))}`;\n\t\t}\n\n\t\treturn targetHref;\n\t}\n\n\tprivate isSame(workspaceA: IWorkspace, workspaceB: IWorkspace): boolean {\n\t\tif (!workspaceA || !workspaceB) {\n\t\t\treturn workspaceA === workspaceB; // both empty\n\t\t}\n\n\t\tif (isFolderToOpen(workspaceA) && isFolderToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.folderUri, workspaceB.folderUri); // same workspace\n\t\t}\n\n\t\tif (isWorkspaceToOpen(workspaceA) && isWorkspaceToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.workspaceUri, workspaceB.workspaceUri); // same workspace\n\t\t}\n\n\t\treturn false;\n\t}\n\n\thasRemote(): boolean {\n\t\tif (this.workspace) {\n\t\t\tif (isFolderToOpen(this.workspace)) {\n\t\t\t\treturn this.workspace.folderUri.scheme === Schemas.vscodeRemote;\n\t\t\t}\n\n\t\t\tif (isWorkspaceToOpen(this.workspace)) {\n\t\t\t\treturn this.workspace.workspaceUri.scheme === Schemas.vscodeRemote;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nclass WindowIndicator implements IWindowIndicator {\n\treadonly onDidChange = Event.None;\n\n\treadonly label: string;\n\treadonly tooltip: string;\n\treadonly command: string | undefined;\n\n\tconstructor(workspace: IWorkspace) {\n\t\tlet repositoryOwner: string | undefined = undefined;\n\t\tlet repositoryName: string | undefined = undefined;\n\n\t\tif (workspace) {\n\t\t\tlet uri: URI | undefined = undefined;\n\t\t\tif (isFolderToOpen(workspace)) {\n\t\t\t\turi = workspace.folderUri;\n\t\t\t} else if (isWorkspaceToOpen(workspace)) {\n\t\t\t\turi = workspace.workspaceUri;\n\t\t\t}\n\n\t\t\tif (uri?.scheme === 'github1s') {\n\t\t\t\t[repositoryOwner = 'conwnet', repositoryName = 'github1s'] = URI.parse(\n\t\t\t\t\tgetBrowserUrl()\n\t\t\t\t)\n\t\t\t\t\t.path.split('/')\n\t\t\t\t\t.filter(Boolean);\n\t\t\t}\n\t\t}\n\n\t\t// Repo\n\t\tif (repositoryName && repositoryOwner) {\n\t\t\tthis.label = localize(\n\t\t\t\t'playgroundLabelRepository',\n\t\t\t\t'$(remote) GitHub1s: {0}/{1}',\n\t\t\t\trepositoryOwner,\n\t\t\t\trepositoryName\n\t\t\t);\n\t\t\tthis.tooltip = localize(\n\t\t\t\t'playgroundRepositoryTooltip',\n\t\t\t\t'GitHub1s: {0}/{1}',\n\t\t\t\trepositoryOwner,\n\t\t\t\trepositoryName\n\t\t\t);\n\t\t}\n\n\t\t// No Repo\n\t\telse {\n\t\t\tthis.label = localize('playgroundLabel', '$(remote) GitHub1s');\n\t\t\tthis.tooltip = localize('playgroundTooltip', 'GitHub1s');\n\t\t}\n\t}\n}\n\n(function () {\n\t// Find config by checking for DOM\n\tconst configElement = document.getElementById(\n\t\t'vscode-workbench-web-configuration'\n\t);\n\tconst configElementAttribute = configElement\n\t\t? configElement.getAttribute('data-settings')\n\t\t: undefined;\n\tif (!configElement || !configElementAttribute) {\n\t\tthrow new Error('Missing web configuration element');\n\t}\n\n\tconst config: IWorkbenchConstructionOptions & {\n\t\tfolderUri?: UriComponents;\n\t\tworkspaceUri?: UriComponents;\n\t} = JSON.parse(configElementAttribute);\n\n\t// Revive static extension locations\n\tif (Array.isArray(config.staticExtensions)) {\n\t\tconfig.staticExtensions.forEach((extension) => {\n\t\t\textension.extensionLocation = URI.revive(extension.extensionLocation);\n\t\t});\n\t}\n\n\t// Find workspace to open and payload\n\tlet foundWorkspace = false;\n\tlet workspace: IWorkspace;\n\tlet payload = Object.create(null);\n\tlet logLevel: string | undefined = undefined;\n\n\tconst query = new URL(document.location.href).searchParams;\n\tquery.forEach((value, key) => {\n\t\tswitch (key) {\n\t\t\t// Folder\n\t\t\tcase WorkspaceProvider.QUERY_PARAM_FOLDER:\n\t\t\t\tworkspace = { folderUri: URI.parse(value) };\n\t\t\t\tfoundWorkspace = true;\n\t\t\t\tbreak;\n\n\t\t\t// Workspace\n\t\t\tcase WorkspaceProvider.QUERY_PARAM_WORKSPACE:\n\t\t\t\tworkspace = { workspaceUri: URI.parse(value) };\n\t\t\t\tfoundWorkspace = true;\n\t\t\t\tbreak;\n\n\t\t\t// Empty\n\t\t\tcase WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW:\n\t\t\t\tworkspace = undefined;\n\t\t\t\tfoundWorkspace = true;\n\t\t\t\tbreak;\n\n\t\t\t// Payload\n\t\t\tcase WorkspaceProvider.QUERY_PARAM_PAYLOAD:\n\t\t\t\ttry {\n\t\t\t\t\tpayload = JSON.parse(value);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error); // possible invalid JSON\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// Log level\n\t\t\tcase 'logLevel':\n\t\t\t\tlogLevel = value;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\t// If no workspace is provided through the URL, check for config attribute from server\n\tif (!foundWorkspace) {\n\t\tif (config.folderUri) {\n\t\t\tworkspace = { folderUri: URI.revive(config.folderUri) };\n\t\t} else if (config.workspaceUri) {\n\t\t\tworkspace = { workspaceUri: URI.revive(config.workspaceUri) };\n\t\t} else {\n\t\t\tworkspace = undefined;\n\t\t}\n\t}\n\n\t// Workspace Provider\n\tconst workspaceProvider = new WorkspaceProvider(workspace, payload);\n\n\t// Home Indicator\n\tconst [repoOwner = 'conwnet', repoName = 'github1s'] = (\n\t\tURI.parse(window.location.href).path || ''\n\t)\n\t\t.split('/')\n\t\t.filter(Boolean);\n\tconst homeIndicator: IHomeIndicator = {\n\t\thref: `https://github.com/${repoOwner}/${repoName}`,\n\t\ticon: 'github',\n\t\ttitle: localize('home', 'Home'),\n\t};\n\n\t// Window indicator (unless connected to a remote)\n\tlet windowIndicator: WindowIndicator | undefined = undefined;\n\tif (!workspaceProvider.hasRemote()) {\n\t\twindowIndicator = new WindowIndicator(workspace);\n\t}\n\n\t// Product Quality Change Handler\n\tconst productQualityChangeHandler: IProductQualityChangeHandler = (\n\t\tquality\n\t) => {\n\t\tlet queryString = `quality=${quality}`;\n\n\t\t// Save all other query params we might have\n\t\tconst query = new URL(document.location.href).searchParams;\n\t\tquery.forEach((value, key) => {\n\t\t\tif (key !== 'quality') {\n\t\t\t\tqueryString += `&${key}=${value}`;\n\t\t\t}\n\t\t});\n\n\t\twindow.location.href = `${window.location.origin}?${queryString}`;\n\t};\n\n\t// settings sync options\n\tconst settingsSyncOptions:\n\t\t| ISettingsSyncOptions\n\t\t| undefined = config.settingsSyncOptions\n\t\t? {\n\t\t\t\tenabled: config.settingsSyncOptions.enabled,\n\t\t\t\tenablementHandler: (enablement) => {\n\t\t\t\t\tlet queryString = `settingsSync=${enablement ? 'true' : 'false'}`;\n\n\t\t\t\t\t// Save all other query params we might have\n\t\t\t\t\tconst query = new URL(document.location.href).searchParams;\n\t\t\t\t\tquery.forEach((value, key) => {\n\t\t\t\t\t\tif (key !== 'settingsSync') {\n\t\t\t\t\t\t\tqueryString += `&${key}=${value}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\twindow.location.href = `${window.location.origin}?${queryString}`;\n\t\t\t\t},\n\t\t  }\n\t\t: undefined;\n\n\t// Finally create workbench\n\tcreate(document.body, {\n\t\t...config,\n\t\tcommands: getGitHub1sCustomCommands(),\n\t\tlogLevel: logLevel ? parseLogLevel(logLevel) : undefined,\n\t\tsettingsSyncOptions,\n\t\thomeIndicator,\n\t\twindowIndicator,\n\t\tproductQualityChangeHandler,\n\t\tworkspaceProvider,\n\t\turlCallbackProvider: new PollingURLCallbackProvider(),\n\t\tcredentialsProvider: new LocalStorageCredentialsProvider(),\n\t});\n\n\tsetTimeout(() => renderNotification(), 1000);\n})();\n"]}